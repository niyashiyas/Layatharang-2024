"use client"
/**
 *
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/A3iRsftZnRS
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'
import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { CardTitle, CardDescription, CardHeader, CardContent, CardFooter, Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { SelectValue, SelectTrigger, SelectItem, SelectContent, Select } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { useState,useEffect } from "react"
import { useRouter } from "next/navigation"
import createSupabaseServerClient from "@/lib/supabase/server"
import { createClient } from "@/utils/browserClient"
export function AddResultForm() {
  const router = useRouter();
  const [loading , setLoading] = useState(true);
  const [eventName, setEventName] = useState('');
  const [domain , setDomain] = useState('');
  const [houses, setHouses] = useState([]);
  const [rows, setRows] = useState([{ team: '', position: '1', participant: '' },
  { team: '', position: '2', participant: '' },
  { team: '', position: '3', participant: '' }
]);

  const addRow = () => {
    setRows([...rows, { team: '', position: `${ 
      rows.length + 1
    }`, participant: '' }]);
  };
  const handleChange = (name,value,index) => {
    const newRows = [...rows];
    const field = name;
    newRows[index][field] = value;
    setRows(newRows);
  };
  const handleSubmit = async () => {
    const supabase = createClient();
    const user = await supabase.auth.getUser();
    const {data: createdEvent , error} = await supabase.from('event').insert([{name:eventName,domain}]).select('*');
    const results = rows.map((row)=>{
      return {
        event_id: createdEvent[0].id,
        house_id: row.team,
        position: parseInt(row.position),
        participant: row.participant
      }
    });
    const {data: createdResults , error2} = await supabase.from('result').insert(results).select('*');
    if(error2)console.log("error in creating results",error2);
    else 
{
    alert("Results uploaded successfully");
}  }

  useEffect(()=>{
    setLoading(true);
    async function fetchHouses(){
      const supabase = createClient();
      const { data, error } = await supabase.from('house').select('*');
      if(error || !data)
      {
        console.error("error in fetching houses",error);
        return;
      }
      setHouses(data);
      setLoading(false);
    }
    fetchHouses();
  
  },[]);
  return (
    ( !loading && <Card className="h-screen">
      <CardHeader>
        <CardTitle>Upload results</CardTitle>
        <CardDescription>Submit the results of the event.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex space-x-1">
       <Input value={eventName} id="event" className="w-60" onChange={(e)=>{
          setEventName(e.target.value);
        
      }} placeholder="Enter event name" type="text"/>

    <Select name="domain" value={domain} onValueChange={(value)=>[
      setDomain(value)
    ]}>
                <SelectTrigger>
                  <SelectValue placeholder="Select Domain" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="CHAKRAVYUH">Chakravyuh</SelectItem>
                  <SelectItem value="LAYATARANG">Layatarang</SelectItem>
                </SelectContent>
              </Select>
              </div>

        {rows.map((row, index) => (
          <div key={index} className="flex space-x-4">
                        <div className="flex flex-col space-y-1.5 w-40">
              <Label htmlFor={`position-${index}`}>Position</Label>
              <Select name="position" defaultValue={`${index+1}`} onValueChange={(value)=>{
                handleChange("position",value,index);
              }}>
                <SelectTrigger>
                  <SelectValue placeholder="Select position" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">First</SelectItem>
                  <SelectItem value="2">Second</SelectItem>
                  <SelectItem value="3">Third</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex flex-col space-y-1.5 w-60">
              <Label htmlFor={`team-${index}`}>Team</Label>
              <Select name="team" onValueChange={(value)=>{
                handleChange("team",value,index);
              }}>
                <SelectTrigger>
                  <SelectValue placeholder="Select Team" />
                </SelectTrigger>
                <SelectContent>
                  {houses.map((house)=>(
                    <SelectItem key={house.id} value={house.id}>{house.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="flex flex-col space-y-1.5 flex-1">
              <Label htmlFor={`participant-${index}`}>participant</Label>
              <Input id={`participant-${index}`} placeholder="Enter participant name" type="text" value={row.participant} onChange={(e)=>{
                 handleChange("participant",e.target.value,index);
              }}/>

            </div>
          </div>
        ))}
        <Button onClick={addRow}>Add Row</Button>
      </CardContent>
      <CardFooter className="flex justify-end">
        <Button onClick={handleSubmit} size="sm">
          <UploadIcon className="mr-2 h-4 w-4" />
          Submit
        </Button>
      </CardFooter>
    </Card>)
  );
}

function UploadIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" x2="12" y1="3" y2="15" />
    </svg>)
  );
}
